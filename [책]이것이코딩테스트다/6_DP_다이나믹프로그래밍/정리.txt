● 다이나믹 프로그래밍(DP)
(= 동적 계획법)
메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법
이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장해서 다시 계산 안함.
2가지 종류: 탑다운(하향식), 보텀업(상향식)
-> DP의 전형적인 형태는 보텀업 방식이다
결과 저장용 리스트를 테이블에 저장해두고 꺼내씀 (메모이제이션)
(담아두기만하고 쓰지않을 수 도 있어서 "DP가 메모이제이션이다" 는 아니다.)

자료구조에서 동적 할당(Dynamic Allocation)은 '프로그램이 실행되는 도중에 
실행에 필요한 메모리를 할당하는 기법'을 의미한다.
(다이나믹 프로그래밍에서 '다이나믹'은 별다른 의미 없이 사용된 단어임)

● DP의사용할 수 있는 조건
1. 최적 부분 구조(Optimal Substructure)
큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결 할 수 있다.
2. 중복되는 부분 문제(Overlapping Subproblem)
동일한 작은 문제를 반복적으로 해결해야 한다.

● DP vs 분할 정복
- 공통점
'최적 부분 구조'를 가질 때 사용할 수 있다.
큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결 할 수 있다.
- 차이점
'부분 문제의 중복'이다.
DP는 각 부분 문제들이 서로 영향을 미치어 부분 문제가 중복되지만,
분할 정복은 동일한 부분 문제가 반복적으로 계산되지 않는다. ex) 퀵 정렬할때 한 사이클 돌때마다 나온 결과를 또 보지는 않는다

● 풀이 요령
1. DP유형 인지 파악하는게 먼저이다.
2. 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토한다.
-> 풀이가 떠오르지 않으면 DP를 고려해보자
3. 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에(탑다운) 작은 문제에서
구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법으로 사용 가능
4. 일반적인 코테 수준에서는 기본 유형의 DP문제가 출제되곤 한다.