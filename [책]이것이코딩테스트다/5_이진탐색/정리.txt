● 파이썬 이진 탐색 라이브러리
from bisect import bisect_left, bisect_right

bisect_left(a, x)
정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스 반환
bisect_right(a, x)
정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 오른쪽 인덱스 반환

a = [1, 2, 4, 4, 8]
x = 4
print(bisect_left(a,x)) # 2  index 2번위치에 넣으면 순서맞음
print(bisect_right(a,x)) # 4   index 4번 위치에 넣으면 순서 맞음

● 연습
-값이 특정 범위에 속하는 데이터 개수 구하기
from bisect import bisect_left, bisect_right
def count_by_range(array, left_value, right_value):
    left_index = bisect_left(array, left_value)
    right_index = bisect_right(array, right_value)
    print(left_index, right_index)
    return right_index - left_index
array = [1, 2, 3, 3, 3, 3, 4, 4, 8, 9]
print(count_by_range(array, 4, 4)) # 값이 4인 데이터 개수
print(count_by_range(array, -1, 3)) # 값이 [-1,3] 범위에 있는 데이터 개수 출력

● 파라메트릭 서치(Parametric Search)
최적화 문제를 결정 문제("예" or "아니오")로 바꾸어 해결하는 문제
ex) 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
일반적으로 코테에서 파라메트릭 서치 문제는 이진탐색으로 해결 가능