'''
● 문제: 1~K까지 약수의 개수를 출력하라.

1) K까지의 수에 대해 1~i까지 다 나눠보는 방법
O(K^2)
: K이하의 수로 다 나눠보는것


2) K까지의 수에 대해 약수를 이용 하는 방법
O(K루트2 * K)
: 약수를 이용하자. K의 가운데 약수까지 확인하면 뒤쪽은 안봐도 됨.
-> 수가 커지면 모든 수를 검사하는 방법은 느릴 수 있다.


3) 에라토스테네스의 체
: 범위 K까지 알고리즘 적용한다. 이때 i(2<=i<=K)가 약수인지 판별할 때에는
O(NloglogN)
-> 행렬을 할당해야하므로 메모리 리스크가 있다.
보통 N이 1_000_000이내로 주어지는 경우가 많음
-> 이론상 400만 번 정도 연산으로 문제 해결 가능.

'''

# 문제: 1000이하의 수 중에서 소수는 몇 개인가?

import math 

n = 1000 
array = [True] * (n+1) # 0~1000

# 에라토스테네스의 체 알고리즘
array[1] = False # 1은 소수 아님
for i in range(2, int(math.sqrt(n)) + 1): # 2~ n의 약수의 중간까지
    if array[i] == True: # i가 남은 수인 경우(소수인 경우)
        j = 2 
        while i*j <= n:
            array[i*j] = False
            j += 1

# 모든 소수 출력
for i in range(2, n+1):
    if array[i]:
        print(i,end=' ')
