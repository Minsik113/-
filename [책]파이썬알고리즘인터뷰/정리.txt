● 유튜브
:라이브로 코딩하는것을 볼 수 있다.
https://www.youtube.com/user/ChrissSong

● 깃허브
:교재의 소스코드와 Q&A
https://github.com/onlybooks/algorithm-interview

● 정규식 표현 blog
https://blog.dasomoli.org/python-regular-expression-howto/

● 참고
★파이썬은 모든 것이 객체이다.
    1. 불변 객체 - (bool, int, float, tuple, str)
    a = 4
    b = a
    b = 10
    -> a, b 는 같은 id를 가지고 있다. 뒤에 b = 10으로 선언한후에 id를 보면 id가 바뀌어있다.
    (값이 변한게 아니라, 새로운 객체를 참조 하였다는 의미이다.)

    2. 가변 객체 - (list, set, dict)
    a = [1, 2, 3, 4]
    a[2] = 6 
    >>> a = [1, 2, 6, 4]
    (값이 변함)
★ is 와 == 
    1. is는 id()값을 비교하는 함수이다.
    None은 널(null)로서 값 자체가 정의되어 있지 않으므로 ==로 비교 불가.
    -> None은 is로만 비교 가능.
    a = [1, 2, 3]
    >>> a == copy.deepcopy(a)
    True
    >>> a is copy.deepcopy(a)
    False 
    복사한 결과 또한 값은 같지만 id()는 다르다. (==로비교하면 True, is로 비교하면 False)

● 파이썬 자료형
None - None Type

숫자 - 정수형 - 정수(int)
               불리언(bool)

     - 실수(float)

집합 - 집합(set)

매핑 - 딕셔너리(dict)

시퀀스 - 불변 - 문자열(string)
               튜플(tuple)
               바이트(bytes)
       - 가변 - 리스트

● zip()
:2개 이상의 시퀀스를 짧은 길이를 기준으로 일대일 대응하는 새로운 '튜플 시쿼스'를 만드는 역할을 한다.
ex) 
a = [1,2,3,4,5]         - 5개
b = ['A','B','C','D']   - 4개
c = [10,11,12]          - 3개
>>> zip(a,b)
<zip object at 0x1b2dd940>
>>> list(zip(a,b))
[(1,'A'), (2,'B'), (3,'C'), (4,'D')]
>>> d = list(zip(a,b,c))
[(1,'A',10), (2,'B',11), (3,'C',12)]
>>> d[0]
(1,'A',10)
>>> d[0][0]
1
튜플이라 수정 못 함.

● 아스테리스크(*)
: 흔히 별표 라고 부르는 *, C를 개발해보았다면 포인터 변수와 혼동 할 수 있다.
그러나, 파이썬에는 포인터가 존재하지 않는다. 파이썬에서는 언팩(Unpack)이다.
시퀀스 언패킹 연산자(Sequence Unpacking Operator)로 말 그대로 시퀀스를 풀어 헤치는 연산자를 뜻하며, 주로 
튜플이나 리스트를 언패킹하는 데(풀어 헤치는 데) 사용한다.
ex)
nums = [1,1,1,2,2,3]    k = 2
{1: 3, 2: 2, 3:1}

>>> collections.Counter(nums).most_common(k)
[(1, 3), (2, 2)]
# 언패킹 했을 때
>>> list(zip(*collections.Counter(nums).most_common(k)))
[(1,2), (3,2)]
# 언패킹하지 않았을 때
>>> list(zip(collections.Counter(nums).most_common(k)))
[((1,3),), ((2, 2),)]
이런 식으로 튜플이 풀어지지 않고 그대로 하나의 값처럼 묶인다. 이 경우 *로 언패킹을 해줘야 튜플의 값을 풀어 헤칠 수 있다.
언패킹한 값만 별도로 출력할 수가 없기 때문에 디버깅이 어렵지만, 내부적으로는 튜플이 제거되고 [[1,3], [2,2]]과 같은 형태로
모두 리스트로 풀어질 것이다.
ex)
fruits = ['lemon', 'pear', 'watermelon', 'tomato']
>>> fruits
['lemon', 'pear', 'watermelon', 'tomato']
>>> print(fruits[0], fruits[1], fruits[2], fruits[3])
lemon pear watermelon tomato
>>> for f in fruits:
        print(f, end=' ')
lemon pear watermelon tomato
>>> print(*fruits)
lemon pear watermelon tomato

Tip) 변수를 *로 묶어서 처리할 수 있다. 나머지 모든 값을 취하게 됨.
>>> a, *b = [1, 2, 3, 4]
>>> a
1
>>> b
[2, 3, 4]

>>> *a, b = [1, 2, 3, 4]
>>> a
[1, 2, 3]
>>> b
4

● ** 
:C의 더블 포인터와 동일하게 생겼지만, 파이썬에선 전혀 다르게 동작한다.
파이썬에서 * 1개는 튜플 또는 리스트 등의 시퀀스 언패킹이고, ** 2개는 다음과 같이 
키/값 페어를 언패킹하는 데 사용된다.

>>> data_info = {'year': '2020', 
                'month': '01',
                'day': '7'
                }
>>> new_info = {**date_info, 'day': 14}
>>> new_info
{'year': '2020', 'month': '01', 'day': 14}